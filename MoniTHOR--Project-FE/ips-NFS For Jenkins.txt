File of steps to create jenkins agent with AWS instances and Docker Swarm:


Swarm1 - <public-ip>:<internal-ip> 18.237.218.255:172.31.5.172
Swarm2 - <public-ip>:<internal-ip> 54.203.66.208:172.31.1.139
Swarm3 - <public-ip>:<internal-ip> 35.91.143.93:172.31.0.235
Storage - <public-ip>:<internal-ip> 52.11.179.37:172.31.25.74
Agent - <public-ip>:<internal-ip> 34.214.84.62:172.31.6.35
external LB - <DNS>Monitor-Ext-LB-539064508.us-west-2.elb.amazonaws.com:8080 (PORT Number)
internal LB - <DNS>internal-Monithor-Int-LB-681127166.us-west-2.elb.amazonaws.com:50000 (PORT Number)

sudo hostnamectl set-hostname Monithor-Swarm1
sudo apt -y update
sudo apt -y install docker.io
cat <<EOF>>/etc/hosts
172.31.5.172 Monithor-Swarm1
172.31.1.139 Monithor-Swarm2
172.31.0.235 Monithor-Swarm3
172.31.25.74 Monithor-Storage
172.31.6.35 Monithor-Agent
EOF

docker swarm init - (In Swarm1)

docker swarm join --token
docker node ls - To make sure the swarms configured

in the Storge: server most be with 2 disks
***
apt install nfs-server
blkid - To see "xvdb"
fdisk /dev/xvdb (n , p , 1 , enter , enter , w)
mkfs.ext4 /dev/xvdb1
blkid - To see "xvdb" have been configured
mkdir /mnt/export
vi /etc/fstab -- /dev/xvdb1(tab)/mnt/export(tab)ext4(tab)defaults(tab)0(tab)0 -- save (wq!)
systemctl daemon-reload
mount -a
df -h (To make sure the disk is mounted)
vi /etc/exports -- /mnt/export       Monithor-Swarm1(rw,sync,no_subtree_check) Monithor-Swarm2(rw,sync,no_subtree_check) Monithor-Swarm3(rw,sync,no_subtree_check) -- save (wq!)
systemctl restart nfs-server
chmod -R 777 /mnt/export/
chown -R 1000:1000 /mnt/export (after the Swarms operations)
***

in the Swarms:
***
apt install nfs-common
mkdir /var/jenkins_home
vi /etc/fstab
Monithor-Storage:/mnt/export     /var/jenkins_home       nfs     defaults        0       0 -- save (wq!)
systemctl daemon-reload
mount -a
df -h (to see if everything is set)
touch /var/jenkins_home/swarm (to make sure we can touch in the server)
rm /var/jenkins_home/swarm
In One of the swarms:
docker service create --name jenkins --publish published=8080,target=8080 --publish published=50000,target=50000 --mount type=bind,source=/var/jenkins_home,target=/var/jenkins_home jenkins/jenkins
ls /var/jenkins_home (to make sure the files created)
***

in the storage server:
cat /mnt/export/secrets/initialAdminPassword

after configure the jenkins:
Go to >> Manage Jenkins >> Nodes >> New Node
V > Parament
Description > anything
Number of executors > 1
Remote root directory > /var/jenkins_home
Labels > like the name of the Node
Usage > Only build jobs ...
Launch method > Lunch agent by ...
Availability > Keep this agent ...
Save

in the agent:
***
click on the node name that created in jenkins
Copy from > "Run from agent command line: (Unix)" curl -sO http://monithor-lb-external-1467851008.us-west-2.elb.amazonaws.com:8080/jnlpJars/agent.jar java -jar agent.jar -url http://monithor-lb-external-1467851008.us-west-2.elb.amazonaws.com:8080/ -secret 109a6d47701d11b53c6701016202999af3a40d033f275f5de1778d533087731f -name docker -webSocket -workDir "/var/jenkins_home"
apt -y install docker.io
curl commend from the jar (curl -sO http://monithor-lb-external-1467851008.us-west-2.elb.amazonaws.com:8080/jnlpJars/agent.jar)
mkdir /var/jenkins_home
mv agent.jar /var/jenkins_home
cd /var/jenkins_home/
chmod -R 777 /var/jenkins_home
apt install openjdk-17-jre-headless
run the java commend (java -jar agent.jar -url http://monithor-lb-external-1467851008.us-west-2.elb.amazonaws.com:8080/ -secret 109a6d47701d11b53c6701016202999af3a40d033f275f5de1778d533087731f -name docker -webSocket -workDir "/var/jenkins_home)
create service:
vi service.sh >> inside /var/jenkins_home >> after #!/bin/bash copy the java jar
chmod -R 755 service.sh
vi /etc/systemd/system/jenkins_agent.service
"
[Unit]
Description=Jenkins agent for docker related operations
After=network.target


[Service]
User=root
WorkingDirectory=/var/jenkins_home
ExecStart=/bin/bash /var/jenkins_home/service.sh
#Restart=always


[Install]
WantedBy=default.target
"
systemctl start jenkins_agent
systemctl enable jenkins_agent (to make it run after the instance stop)
***
